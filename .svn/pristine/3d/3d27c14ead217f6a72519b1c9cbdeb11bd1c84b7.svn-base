import React, { useState, useEffect } from 'react';
import {
  Modal,
  Form,
  Input,
  Menu,
  Dropdown,
  Button,
  Checkbox,
  Row,
  Col,
  Select,
  Transfer,
  Empty,
} from 'antd';
import _ from 'lodash';
import { SearchOutlined } from '@ant-design/icons';
import styles from './index.less';
const { Option } = Select;
import { getSourcePage, getQcArchivesById } from './../../../services/store';

const selectOptions = [
  {
    value: '',
    label: '全部',
  },
  {
    value: '微博',
    label: '微博',
  },
  {
    value: '公众号',
    label: '公众号',
  },
  {
    value: '谷歌',
    label: '谷歌',
  },
  {
    value: '博客',
    label: '博客',
  },
  {
    value: '网站',
    label: '网站',
  },
  {
    value: '百度',
    label: '百度',
  },
  {
    value: '推特',
    label: '推特',
  },
];
const SocialEditor = ({ visible, onSave, isEditing, data, onCancel, editingId }) => {
  const [valueName, setValueName] = useState('');
  const [selectValue, setSelectValue] = useState('');
  const [inputValue, setInputValue] = useState('');
  const [loading, setLoading] = useState(false);
  const [targetKeys, setTargetKeys] = useState([]);
  const [selectedKeys, setSelectedKeys] = useState([]);
  const [sourceData, setSourceData] = useState([]);
  const [filteredSel, setFilteredSel] = useState([]);

  useEffect(() => {
    if (isEditing && data) {
      setTargetKeys(data.targetKeys.map(String));
      setSelectedKeys(data.targetKeys.map(String));
      setValueName(data.valueName || '');
      setSelectValue(data.selectValue || '');
      setInputValue(data.inputValue || '');
    } else {
      setTargetKeys([]);
      setSelectedKeys([]);
      setValueName('');
      setSelectValue('');
      setInputValue('');
    }
  }, [data, isEditing]);
  useEffect(() => {
    const filteredArray = sourceData.filter(item => targetKeys.includes(item.key));
    console.log('filteredArray', filteredArray);
    setFilteredSel(filteredArray);
  }, [targetKeys]);
  useEffect(() => {
    handleSearchZhang();
  }, [selectValue]);

  const handleSearchZhang = () => {
    const params = {
      type: selectValue,
      name: inputValue,
    };
    getSourcePage(params)
      .then(response => {
        if (response && response.data) {
          const newData = response.data.map((item, index) => ({
            key: `${item.id}`,
            title: item.name,
            description: item.description,
          }));
          let finallyData;
          if (filteredSel && filteredSel.length > 0) {
            finallyData = newData.concat(filteredSel).filter((item, index, self) => {
              return index === self.indexOf(item);
            });
            setSourceData(finallyData);
          } else {
            setSourceData(newData);
          }
        }
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });
  };

  const save = () => {
    if (!valueName) {
      alert('信源档案名称不能为空');
      return;
    }
    if (targetKeys.length === 0) {
      alert('至少选择一个监测账号');
      return;
    }

    const numericTargetKeys = targetKeys.map(key => parseInt(key, 10));
    let dataToSave = {
      archivesName: valueName,
      sourceIdList: numericTargetKeys,
    };
    if (isEditing && editingId) {
      dataToSave.archivesId = editingId;
    }
    onSave(dataToSave, isEditing);
  };

  const handleSelectValueChange = value => {
    console.log('targetKeys', targetKeys);
    console.log('sourceData', sourceData);

    setSelectValue(value); // 更新 selectValue 状态
    // 清空左侧列表的 selectedKeys，但不改变 targetKeys
    setSelectedKeys([]);
  };

  const onChange = (nextTargetKeys, direction, moveKeys) => {
    console.log(nextTargetKeys, direction, moveKeys);
    setTargetKeys(nextTargetKeys, () => {
      // 这里可以获取到最新的 targetKeys
      console.log('targetKeys', targetKeys);
    });

    // 始终更新 selectedKeys 为 moveKeys
    // setSelectedKeys(moveKeys);
    // sourceData.map((item, index) => {});
  };

  const handleSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {
    // 当用户在 Transfer 组件中选择项时，更新 selectedKeys
    // setSelectedKeys(sourceSelectedKeys);
    setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);
  };
  return (
    <Modal
      className={styles.modalAdd}
      visible={visible}
      onCancel={onCancel}
      width={800}
      onOk={save}
      confirmLoading={loading}
    >
      <Form labelWidth={120} labelPosition="left">
        <Form.Item label={isEditing ? '编辑信源档案名称：' : '信源档案名称：'}>
          <Input
            placeholder="信源档案名称"
            value={valueName}
            onChange={e => setValueName(e.target.value)}
          />
        </Form.Item>
        <Form.Item label="账号池检索：" className={styles.inputTwo}>
          <Input.Group compact className={styles.btnSearch}>
            <Select
              style={{ width: 120 }}
              onChange={handleSelectValueChange}
              placeholder="请选择"
              options={selectOptions}
              value={selectValue}
            />
            <Input
              className={styles.btnSearch}
              style={{ width: 'calc(70% - 10px)' }}
              placeholder="昵称"
              value={inputValue}
              onChange={e => setInputValue(e.target.value)}
              allowClear
            />
            <Button
              icon={<SearchOutlined />}
              onClick={handleSearchZhang}
              className={styles.btnSearch}
            />
          </Input.Group>
        </Form.Item>
        <Form.Item label="账号池：">
          <Transfer
            dataSource={sourceData}
            targetKeys={targetKeys}
            selectedKeys={selectedKeys}
            onChange={onChange}
            onSelectChange={handleSelectChange}
            render={item => item.title}
          />
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default SocialEditor;
