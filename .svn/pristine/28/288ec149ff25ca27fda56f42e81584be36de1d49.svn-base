import React, { useState, useEffect, useCallback } from 'react';
import 'moment/locale/zh-cn';
import locale from 'antd/es/date-picker/locale/zh_CN';
import Icon from '@/components/Icon';
import axios from 'axios';
import moment from 'moment';
import {
  PlusOutlined,
  YuqueOutlined,
  FolderOpenOutlined,
  FolderOutlined,
  DeleteOutlined,
  EditOutlined,
} from '@ant-design/icons';

import styles from './index.less';
import {
  DatePicker,
  Checkbox,
  Pagination,
  Button,
  Input,
  Tabs,
  Menu,
  Modal,
  Dropdown,
  Popconfirm,
  message,
  Empty,
} from 'antd';
import DashboardCard from './../../components/common/DashboardCard';
import ActionStats from '@/components/common/ActionStats';
import CardModal from './../../components/common/CardModal';
import SocialEditor from '@/components/common/SocialEditor';

import weibo from './../../assets/images/icon/weibo.png';
import weixin from './../../assets/images/icon/weixin.png';
import google from './../../assets/images/icon/google.png';
import blog from './../../assets/images/icon/blog.png';
import wangzhan from './../../assets/images/icon/new.png';
import baidu from './../../assets/images/icon/baidu.png';
import twitter from './../../assets/images/icon/twitter.png';
const { RangePicker } = DatePicker;
const { Search } = Input;
import {
  getQcArchivesPage,
  getQcArchivesSourcePage,
  getNewsPage,
  getQcArchivesSave,
  getQcArchivesDelete,
  getQcArchivesUpdate,
  getInfo,
  exportNewsToExcel,
  downNewsWord,
  exportNewsToWordZip,
} from './../../services/store';
import img from '@/assets/images/logo.png';

const dynamicImg = sourceType => {
  switch (sourceType) {
    case '微博':
      return weibo;
    case '公众号':
      return weixin;
    case '谷歌':
      return google;
    case '博客':
      return blog;
    case '网站':
      return wangzhan;
    case '百度':
      return baidu;
    case '推特':
      return twitter;

    default:
      return '';
  }
};

export default function Dashboard() {
  const [showDialog, setShowDialog] = useState(false); //在你点击那个的时候。弹出弹框。关闭的时候把这个组件销毁掉类似这个意思，我看你好像有其他状态判断。
  const [selectedRange, setSelectedRange] = useState('1m');
  const [selectedLanguage, setSelectedLanguage] = useState('');
  const [dateRange, setDateRange] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');

  const [isExportMode, setIsExportMode] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [isModalVisible, setIsModalVisible] = useState(false);

  const [currentCardData, setCurrentCardData] = useState(null);

  const [firstLevelArchives, setFirstLevelArchives] = useState([]);
  const [secondLevelArchives, setSecondLevelArchives] = useState({});
  const [selectedFirstLevelArchiveId, setSelectedFirstLevelArchiveId] = useState(null);
  const [selectedSecondLevelArchiveId, setSelectedSecondLevelArchiveId] = useState(null);
  const [expanded, setExpanded] = useState(
    firstLevelArchives.reduce((acc, item) => ({ ...acc, [item.id]: false }), {})
  );

  const [editingId, setEditingId] = useState(null);
  const [isEditing, setIsEditing] = useState(false);

  const [isSocialEditorVisible, setIsSocialEditorVisible] = React.useState(false); //这个但是我没有销毁，没想过这一步。那你就先用if语句renturn
  const [mockData, setMockData] = useState([]);
  const [totalCount, setTotalCount] = useState(0);
  const [searchKeywords, setSearchKeywords] = useState('');
  const [modalData, setModalData] = useState({});
  const [isLoading, setIsLoading] = useState({});
  const [showActions, setShowActions] = useState(false);

  const calculateTimeRange = range => {
    const endDate = new Date(); // 结束时间为当前时间
    let startTime;

    switch (range) {
      case '24h':
        startTime = new Date(endDate.getTime() - 3600 * 1000 * 24 * 1); // 24小时
        break;
      case '1w':
        startTime = new Date(endDate.getTime() - 3600 * 1000 * 24 * 7); // 一周
        break;
      case '1m':
        startTime = new Date(endDate.getTime() - 3600 * 1000 * 24 * 30); // 一月
        break;
      case '1y':
        startTime = new Date(endDate.getTime() - 3600 * 1000 * 24 * 365); // 一年
        break;
      default:
        startTime = null;
    }

    const formatTime = date => {
      return date ? moment(date).format('YYYY-MM-DD HH:mm:ss') : '';
    };

    return {
      startTime: formatTime(startTime),
      endTime: formatTime(new Date()),
    };
  };

  const handleRangeChange = range => {
    console.log(range, totalCount);

    setSelectedRange(range);

    if (range !== 'custom') {
      const { startTime, endTime } = calculateTimeRange(range);
      setDateRange([
        moment(startTime, 'YYYY-MM-DD HH:mm:ss'),
        moment(endTime, 'YYYY-MM-DD HH:mm:ss'),
      ]);
    }
  };

  const handleDateChange = (dates, dateStrings) => {
    setDateRange(dates);
  };

  const handleLanguageChange = language => {
    setSelectedLanguage(language);
  };

  const handleSearch = searchQuery => {
    setCurrentPage(1);
    setSearchQuery(searchQuery);
    setSearchKeywords(searchQuery);
  };
  const highLight = (text, keyword) => {
    if (!keyword || keyword.trim() === '') {
      return text;
    }
    const regex = new RegExp(`(${keyword})`, 'gi');
    const parts = text.split(regex);
    return parts.map((part, index) => {
      if (regex.test(part)) {
        return (
          <span key={index} style={{ color: 'red' }}>
            {part}
          </span>
        );
      } else {
        return part;
      }
    });
  };

  useEffect(() => {
    setMockData([]);
    fetchListData();
  }, [
    currentPage,
    selectedFirstLevelArchiveId,
    selectedSecondLevelArchiveId,
    selectedRange,
    selectedLanguage,
    dateRange,
    searchQuery,
  ]);

  useEffect(() => {
    setCurrentPage(1);
    setMockData([]);
  }, [selectedFirstLevelArchiveId, selectedSecondLevelArchiveId]);
  useEffect(() => {
    fetchFirstLevelArchives();
  }, []);

  // 获取一级档案数据
  const fetchFirstLevelArchives = async () => {
    try {
      const response = await getQcArchivesPage({
        page: currentPage.toString(),
        limit: pageSize.toString(),
      });
      if (response.code === 200) {
        const firstLevelData = response.page.list.map(item => ({
          id: item.archives_id,
          name: item.archives_name,
          children: [],
        }));
        setFirstLevelArchives(firstLevelData);

        if (firstLevelData.length > 0) {
          setSelectedFirstLevelArchiveId(firstLevelData[0].id);
        }
      }
    } catch (error) {
      console.error('获取一级档案数据失败:', error);
      message.error('获取数据失败');
    }
  };

  // 获取二级档案数据
  const fetchSecondLevelArchives = async archivesId => {
    try {
      const response = await getQcArchivesSourcePage({
        page: currentPage.toString(),
        limit: pageSize.toString(),
        archivesId,
      });
      if (response.code === 200) {
        const secondLevelData = response.page.list.map(item => ({
          id: item.sourceId,
          name: item.name,
          icon: 'MonitorOutlined',
        }));
        setSecondLevelArchives({
          ...secondLevelArchives,
          [archivesId]: secondLevelData,
        });
      }
    } catch (error) {
      console.error('获取二级档案数据失败:', error);
    }
  };
  useEffect(() => {
    const initialExpanded = firstLevelArchives.reduce(
      (acc, item) => ({ ...acc, [item.id]: false }),
      {}
    );
    setExpanded(initialExpanded);
  }, [firstLevelArchives]);
  const handleMonitorItemClick = id => {
    const newExpanded = { ...expanded };
    newExpanded[id] = !newExpanded[id]; // 切换当前点击的一级档案的展开状态
    setExpanded(newExpanded);

    // 如果已经展开，则获取二级档案数据
    if (newExpanded[id]) {
      fetchSecondLevelArchives(id);
    } else {
      // 如果收起，则清空该一级档案的二级档案数据
      setSecondLevelArchives({ ...secondLevelArchives, [id]: [] });
      setSelectedSecondLevelArchiveId(null); // 重置选中的二级档案ID
    }
  };

  const handleSecondLevelItemClick = (firstLevelId, secondLevelId) => {
    console.log('设置选中的二级档案ID:', secondLevelId);
    setSelectedFirstLevelArchiveId(firstLevelId);
    setSelectedSecondLevelArchiveId(secondLevelId);
    setCurrentPage(1);
  };

  // 新闻列表
  const fetchListData = async () => {
    setIsLoading(true);
    try {
      let startTime, endTime;

      if (selectedRange === 'custom' && dateRange.length) {
        startTime = dateRange[0].format('YYYY-MM-DD HH:mm:ss');
        endTime = dateRange[1].format('YYYY-MM-DD HH:mm:ss');
      } else {
        const { startTime: calculatedStartTime, endTime: calculatedEndTime } =
          calculateTimeRange(selectedRange);
        startTime = calculatedStartTime;
        endTime = calculatedEndTime;
      }

      const response = await getNewsPage({
        page: currentPage.toString(),
        limit: pageSize.toString(),
        archivesId: selectedFirstLevelArchiveId,
        sourceId: selectedSecondLevelArchiveId || '',
        startTime,
        endTime,
        lang: selectedLanguage || '',
        searchContent: searchQuery || '',
      });

      setMockData(response.page.list);
      // console.log(mockData, response.page.list);

      setTotalCount(response.page.totalCount);
    } catch (error) {
      console.error('获取数据失败:', error);
      message.error('获取数据失败');
    } finally {
      setIsLoading(false);
    }
  };

  const handleModalVisibility = isVisible => {
    setIsModalVisible(isVisible);
  };

  const handleSave = async (dataToSave, event) => {
    try {
      let response;

      if (isEditing) {
        setIsEditing(true);
        response = await getQcArchivesUpdate({ ...dataToSave, archivesId: editingId }); // 调用更新接口
        setEditingId(null); // 清除编辑id
      } else {
        response = await getQcArchivesSave(dataToSave); // 调用新增接口
      }

      if (response && response.code === 200) {
        await fetchFirstLevelArchives(); // 刷新数据
        message.success(isEditing ? '编辑成功' : '保存成功');
        setIsSocialEditorVisible(false);
      } else {
        if (response && response.data && response.error) {
          message.error(response.error);
        } else if (response) {
          message.error(response.msg ? response.msg : '操作失败，未知错误');
        } else {
          message.error('操作失败，未收到响应');
        }
      }
    } catch (error) {
      console.error('操作失败:', error);
      message.error('操作时发生错误');
    }
  };

  const confirmDelete = async (id, event) => {
    event.stopPropagation(); // 阻止事件冒泡
    try {
      const response = await getQcArchivesDelete({ archivesId: id });

      if (response.code === 200) {
        await fetchFirstLevelArchives();
        message.success('删除成功');
      } else {
        message.error('删除失败');
      }
    } catch (error) {
      console.error('删除失败:', error);
      message.error('删除时发生错误');
    }
  };

  const handleAddMonitor = () => {
    setIsEditing(false); // 设置为新增状态
    setCurrentCardData({}); // 清空数据
    setIsSocialEditorVisible(true); // 显示编辑器
  };
  const handleEditClick = (id, event) => {
    event.stopPropagation();
    const selectedArchive = firstLevelArchives.find(archive => archive.id === id);

    // 确保 selectedArchive 包含所有需要的数据
    setCurrentCardData({
      ...selectedArchive,
      targetKeys: selectedArchive.targetKeys || [],
      selectedKeys: selectedArchive.selectedKeys || [],
      selectValue: selectedArchive.selectValue || '',
      inputValue: selectedArchive.inputValue || '',
    });

    setIsEditing(true);
    setEditingId(id);
    setIsSocialEditorVisible(true);
  };
  const handleCancel = () => {
    console.log('取消操作');
    setIsSocialEditorVisible(false);
  };

  const handleContentClick = async (id, showActions) => {
    console.log(showActions, 'showActions');

    try {
      const response = await getInfo({ newsId: id });

      if (response.code === 200 && response.data) {
        setModalData(modalData => ({
          ...modalData,
          ...response.data,
          showActions: showActions,
          searchQuery: searchQuery,
        }));
        if (response.data.length < 1) {
          return <Empty />;
        }
      } else {
        message.error('获取失败');
      }
    } catch (error) {
      console.error('获取失败:', error);
      message.error('获取时发生错误');
    }
    handleModalVisibility(true);
  };

  const handleExport = id => {
    const newsId = id;

    downNewsWord({ newsId })
      .then(resp => {
        // 创建 Blob 对象
        const blob = new Blob([resp], { type: 'application/vnd.ms-word;charset=utf-8' });

        // 生成 URL
        const url = window.URL.createObjectURL(blob);

        // 创建一个 <a> 元素并设置相关属性
        const link = document.createElement('a');
        link.style.display = 'none';
        link.href = url;
        link.download = '新闻.doc'; // 设置下载文件的名称

        // 将 <a> 元素添加到页面中并触发点击
        document.body.appendChild(link);
        link.click();

        // 清理操作
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);

        message.success('导出成功!');
      })
      .catch(error => {
        console.error('导出失败:', error);
        message.error('导出失败: ' + error.message);
      });
  };
  // 收集当前页新闻ID的方法
  const collectCurrentPageNewsIds = () => {
    const currentIds = mockData.map(item => item.id);
    return currentIds;
  };

  // 导出为Excel的方法
  const handleExportToExcel = () => {
    const newsId = collectCurrentPageNewsIds();
    let newsIdL = {
      newsIdList: newsId,
    };

    exportNewsToExcel(newsIdL)
      .then(resp => {
        // 创建 Blob 对象
        const blob = new Blob([resp], { type: 'application/vnd.ms-xls;charset=utf-8' });

        // 生成 URL
        const url = window.URL.createObjectURL(blob);

        // 创建一个 <a> 元素并设置相关属性
        const link = document.createElement('a');
        link.style.display = 'none';
        link.href = url;
        link.download = '新闻列表.xls'; // 设置下载文件的名称

        // 将 <a> 元素添加到页面中并触发点击
        document.body.appendChild(link);
        link.click();

        // 清理操作
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);

        message.success('导出成功!');
      })
      .catch(error => {
        console.error('导出为Excel失败:', error);
        message.error('导出为Excel失败');
      });
  };

  // 导出多个Word压缩成Zip的方法
  const handleExportToWordZip = () => {
    const newsId = collectCurrentPageNewsIds();
    let newsIdL = {
      newsIdList: newsId,
    };

    exportNewsToWordZip(newsIdL)
      .then(resp => {
        // 创建 Blob 对象
        const blob = new Blob([resp], { type: 'application/vnd.ms-zip;charset=utf-8' });

        // 生成 URL
        const url = window.URL.createObjectURL(blob);

        // 创建一个 <a> 元素并设置相关属性
        const link = document.createElement('a');
        link.style.display = 'none';
        link.href = url;
        link.download = '新闻列表.zip'; // 设置下载文件的名称

        // 将 <a> 元素添加到页面中并触发点击
        document.body.appendChild(link);
        link.click();

        // 清理操作
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);

        message.success('导出成功!');
      })
      .catch(error => {
        console.error('导出为Excel失败:', error);
        message.error('导出为Excel失败');
      });
  };

  const menu = (
    <Menu>
      <Menu.Item key="excel" onClick={handleExportToExcel}>
        导出为Excel
      </Menu.Item>
      <Menu.Item key="wordZip" onClick={handleExportToWordZip}>
        导出为WordZip
      </Menu.Item>
    </Menu>
  );

  const handleCollect = (cardId, isCollected) => {
    console.log('Card ID:', cardId, 'is now', isCollected ? 'collected' : 'not collected');
  };
  return (
    <>
      <div className={styles.container}>
        <div className={styles.left}>
          <Button onClick={handleAddMonitor} icon={<PlusOutlined />} className={styles.btn}>
            添加信源档案
          </Button>
          <div>
            {firstLevelArchives.map(item => (
              <div key={item.id}>
                <div className={styles.listItem} onClick={() => handleMonitorItemClick(item.id)}>
                  {expanded[item.id] ? <FolderOpenOutlined /> : <FolderOutlined />}
                  <span className={styles.title}>{item.name}</span>
                  {/* 其他操作 */}
                </div>
                {expanded[item.id] && (
                  <div className={styles.itemStyle}>
                    {secondLevelArchives[item.id] &&
                      secondLevelArchives[item.id].map(child => (
                        <div
                          key={child.id}
                          className={`${styles.subItem} ${
                            selectedSecondLevelArchiveId === child.id ? 'active' : ''
                          }`}
                          onClick={() => handleSecondLevelItemClick(item.id, child.id)}
                        >
                          <YuqueOutlined style={{ marginRight: '4px' }} />
                          <span className={styles.title}>{child.name}</span>
                        </div>
                      ))}
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
        {isSocialEditorVisible ? (
          <SocialEditor
            visible={isSocialEditorVisible}
            onSave={handleSave}
            isEditing={isEditing}
            data={currentCardData}
            onCancel={handleCancel}
            editingId={editingId}
          />
        ) : null}

        <div className={styles.container1}>
          <div className={styles.countTop}>
            <div className={styles.searchTop}>
              <Search
                placeholder="请输入您要搜索的内容"
                allowClear
                onSearch={e => handleSearch(e)}
                style={{
                  width: 200,
                }}
              />
            </div>
            <div className={styles.timeSelect}>
              <span className={styles.curP}>时间范围：</span>
              <span
                className={`${styles.curP} ${selectedRange === '24h' ? styles.selected : ''}`}
                onClick={() => handleRangeChange('24h')}
              >
                近一天
              </span>
              <span
                className={`${styles.curP} ${selectedRange === '1w' ? styles.selected : ''}`}
                onClick={() => handleRangeChange('1w')}
              >
                近一周
              </span>
              <span
                className={`${styles.curP} ${selectedRange === '1m' ? styles.selected : ''}`}
                onClick={() => handleRangeChange('1m')}
              >
                近一月
              </span>
              <span
                className={`${styles.curP} ${selectedRange === '1y' ? styles.selected : ''}`}
                onClick={() => handleRangeChange('1y')}
              >
                近一年
              </span>
              <span
                className={`${styles.curP} ${selectedRange === 'custom' ? styles.selected : ''}`}
                onClick={() => handleRangeChange('custom')}
              >
                自定义
              </span>
              {selectedRange === 'custom' && (
                <RangePicker
                  locale={locale}
                  range-separator="至"
                  start-placeholder="开始日期"
                  end-placeholder="结束日期"
                  value-format="yyyy-MM-dd HH:mm:ss"
                  default-time={['00:00:00', '23:59:59']}
                  className="mar-l-10"
                  onChange={handleDateChange}
                />
              )}
            </div>
            <div className={styles.languageSelect}>
              <span className={styles.curP}>语种筛选：</span>
              <span
                className={`${styles.curP1} ${selectedLanguage === '' ? styles.selected : ''}`}
                onClick={() => handleLanguageChange('')}
              >
                全部
              </span>
              <span
                className={`${styles.curP1} ${selectedLanguage === '中文' ? styles.selected : ''}`}
                onClick={() => handleLanguageChange('中文')}
              >
                中文
              </span>
              <span
                className={`${styles.curP1} ${selectedLanguage === '日语' ? styles.selected : ''}`}
                onClick={() => handleLanguageChange('日语')}
              >
                日语
              </span>
              <span
                className={`${styles.curP1} ${selectedLanguage === '英文' ? styles.selected : ''}`}
                onClick={() => handleLanguageChange('英文')}
              >
                英文
              </span>
            </div>
            <div
              style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                padding: '0 20px 0 0 ',
              }}
            >
              <span>
                共<span style={{ color: '#FF8000', margin: '0 10px' }}>{totalCount}</span>
                条记录
              </span>

              <Dropdown overlay={menu} placement="bottomCenter">
                <Button style={{ backgroundColor: 'rgba(255, 128, 0, 0.5)', color: 'white' }}>
                  批量导出
                </Button>
              </Dropdown>
            </div>
          </div>
          {mockData.length === 0 ? (
            <Empty className={styles.empty} description={<div>暂无数据</div>} />
          ) : (
            mockData.map((card, index) => {
              const processedCard = {
                ...card,
                titleZh: highLight(card.titleZh, searchQuery),
                contentZh: highLight(card.contentZh, searchQuery),
              };

              return (
                <div key={card.id} style={{ display: 'flex', paddingLeft: '10px' }}>
                  <DashboardCard
                    className={styles.dashboardCardStyle}
                    key={card.id}
                    img={dynamicImg(card.sourceType)}
                    sourceName={card.sourceName}
                    publishTime={card.publishTime}
                    title={processedCard.titleZh}
                    content={processedCard.contentZh}
                    link={card.url}
                    images={card.pics}
                    videos={card.videos}
                    likeNum={card.likeNum}
                    commentNum={card.commentNum}
                    shareNum={card.shareNum}
                    readNum={card.readNum}
                    showActions={card.showActions}
                    onClickContent={() => handleContentClick(card.id, card.showActions)}
                    onCollect={isCollected => handleCollect(card.id, isCollected)}
                    onExport={() => handleExport(card.id)}
                  />
                </div>
              );
            })
          )}
          {mockData.length > 0 && (
            <Pagination
              current={currentPage}
              total={totalCount}
              pageSize={pageSize}
              onChange={(page, pageSize) => {
                setCurrentPage(page);
                setPageSize(pageSize);
              }}
              onShowSizeChange={(current, size) => {
                setCurrentPage(1);
                setPageSize(size);
              }}
              style={{ margin: '10px auto', display: 'flex', justifyContent: 'center' }}
              showSizeChanger={false}
            />
          )}
        </div>
      </div>

      <CardModal
        visible={isModalVisible}
        onCancel={() => handleModalVisibility(false)}
        modalData={modalData}
        setIsModalVisible={handleModalVisibility}
        handleExport={() => handleExport(modalData.id)}
        images={modalData.pics}
        videos={modalData.videos}
      />
    </>
  );
}
