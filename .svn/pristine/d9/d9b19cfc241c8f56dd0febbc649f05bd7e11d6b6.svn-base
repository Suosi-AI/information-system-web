import React, { useState, useRef, useMemo } from 'react';
import {
  AimOutlined,
  EnvironmentOutlined,
  LinkOutlined,
  CalendarOutlined,
} from '@ant-design/icons';
import styles from './index.less';
import { Radio, Space, Tabs } from 'antd';
import hsbad from './../../../assets/images/archives/hsbad.png';
import EChartComponent from '@/components/common/EChartComponent';
import { color } from 'echarts';

export default function BasicInformation({ organizationData }) {
  const [detail, setDetail] = useState(null);
  const [activeTab, setActiveTab] = useState('1');

  // const { treeData } = organizationData;
  const [treeData, setTreeData] = useState(organizationData.treeData); // 从 props 中获取初始数据
  const chartInstance = useRef(null);

  const handleNodeClick = nodeData => {
    // 展示被点击节点的详情
    // setDetail(nodeData);
    // // 如果节点有子节点，切换其展开和折叠状态
    // if (nodeData.children && nodeData.children.length > 0) {
    //   // 深拷贝当前的 treeData 以避免直接修改原数据
    //   const updatedTreeData = JSON.parse(JSON.stringify(treeData));
    //   // 查找被点击节点在 children 数组中的索引
    //   const index = updatedTreeData.children.findIndex(item => item.id === nodeData.id);
    //   if (index !== -1) {
    //     // 切换节点的展开状态
    //     updatedTreeData.children[index].collapsed = !updatedTreeData.children[index].collapsed;
    //     // 更新树形结构
    //     setTreeData(updatedTreeData);
    //   }
    // }
    // // 如果不需要局部更新 ECharts 的节点状态，可以移除以下代码
    // if (chartInstance.current) {
    //   chartInstance.current.dispatchAction({
    //     type: 'treeExpandAndCollapse',
    //     seriesIndex: 0,
    //     dataIndex: nodeData.id,
    //   });
    // }
  };

  const chartOption = useMemo(
    () => ({
      tooltip: {
        trigger: 'item',
        triggerOn: 'mousemove',
        position: function (point, params, dom, rect, size) {
          // 将 tooltip 显示在右侧
          return [point[0] + size.viewSize[0] / 2];
        },
        formatter: function (params) {
          const data = params.data || {}; // 确保数据对象存在
          // 根据数据动态设置职位名称
          const positionName = data.positionName ? data.positionName : 'currentMinister'; // 使用 positionName 键
          const positionValue = data[positionName]; // 获取对应的值
          return `
          <div style="max-width: 300px; padding: 10px; border-radius: 5px; background-color: rgba(0,0,0,0.7); color: #fff;">
            <div style="margin: 0;">机构名称: <span style="color: #00EDD8;">${data.departmentName}</span></div>
            <div style="margin: 0;">现任${positionName}: <p style="color: #00EDD8;">${positionValue}</p></div>
            <div style="margin: 0;">机构简介：
              <pre style="color: #00EDD8; width: 100%; white-space: pre-wrap; word-wrap: break-word; font-size: 12px; line-height: 26px;">${data.introduction}</pre>
            </div>
          </div>
          `.trim();
        },
        backgroundColor: 'rgba(0,0,0,0.7)',
        borderColor: '#333',
        borderWidth: 1,
        borderRadius: 5,
        padding: [10, 10],
      },
      series: [
        {
          type: 'tree',
          data: [treeData],
          roam: true,
          left: '2%',
          right: '2%',
          top: '8%',
          bottom: '20%',
          symbol: 'emptyCircle',
          orient: 'vertical',
          expandAndCollapse: true,
          label: {
            position: 'left',
            rotate: -90,
            verticalAlign: 'middle',
            align: 'right',
            fontSize: 16,
            color: '#00EDD8',
          },
          leaves: {
            label: {
              position: 'bottom',
              rotate: -90,
              verticalAlign: 'middle',
              align: 'left',
            },
          },
          animationDurationUpdate: 750,
        },
      ],
    }),
    [treeData]
  );
  return (
    <div className={styles.container}>
      <div style={{ display: 'flex' }}>
        <img src={hsbad} alt="" style={{ width: '200px', height: '200px' }} />
        <div style={{ marginLeft: '20px' }}>
          <p style={{ fontSize: '18px', fontWeight: 'bold', height: '20px' }}>
            {organizationData.jbTitle}
          </p>
          <span style={{ color: '#999' }}>{organizationData.lianJie}</span>
          <div style={{ margin: '7px 0' }}>
            <span style={{ marginRight: '45px', color: '#999' }}>
              <EnvironmentOutlined style={{ marginRight: '5px' }} />
              {organizationData.address}
            </span>
            <span style={{ marginRight: '45px', color: '#999' }}>
              <LinkOutlined style={{ marginRight: '5px' }} />
              {organizationData.website}
            </span>
            <span style={{ color: '#999' }}>
              <CalendarOutlined style={{ marginRight: '5px' }} />
              {organizationData.joinDate}
            </span>
          </div>
          <span style={{ color: '#999' }}>{organizationData.spokesperson}</span>
          <div style={{ maxHeight: '90px', overflow: 'auto', marginTop: '10px' }}>
            {organizationData.description}
          </div>
        </div>
      </div>
      <div>
        <Tabs
          defaultActiveKey="1"
          style={{
            marginTop: '30px',
            color: 'white',
            backgroundColor: '#282B39',
            padding: ' 0 35px 35px  35px',
            width: '100%',
          }}
        >
          <Tabs.TabPane tab="组织结构" key="1">
            <div style={{ height: '90vh' }}>
              <p
                style={{
                  fontSize: '18px',
                  fontWeight: 'bold',
                  color: '#2bffe6',
                }}
              >
                简介
              </p>
              <pre
                style={{
                  borderBottom: '1px solid #999',
                  padding: '0 0 40px 0',
                  width: '100%',
                  whiteSpace: 'pre-wrap',
                  wordWrap: 'break-word',
                  color: '#D4D5D3',
                  fontSize: '12px',
                }}
              >
                {organizationData.structure}
              </pre>
              <div style={{ display: 'flex', height: '90vh' }}>
                <div style={{ flex: 1 }}>
                  <EChartComponent option={chartOption} onClick={handleNodeClick} />
                </div>
                {detail && (
                  <div
                    style={{
                      // flex: 1,
                      color: '#fff',
                      padding: '20px',
                      width: '300px',
                      background: '#171B28',
                      maxHeight: '600px',
                      overflow: 'auto',
                    }}
                  >
                    <h3 style={{ color: '#fff' }}>{detail.name}</h3>
                    <div>
                      <strong>机构名称:</strong>
                      <p style={{ color: '#00EDD8' }}> {detail.departmentName}</p>
                    </div>
                    <div>
                      <strong>现任部长:</strong>
                      <p style={{ color: '#00EDD8' }}>{detail.currentMinister}</p>
                    </div>
                    <div>
                      <strong>机构简介:</strong>
                      <pre
                        style={{
                          color: '#00EDD8',
                          width: '100%',
                          whiteSpace: 'pre-wrap',
                          wordWrap: 'break-word',
                          fontSize: '12px',
                          lineHeight: '26px',
                        }}
                      >
                        {detail.introduction}
                      </pre>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </Tabs.TabPane>
          <Tabs.TabPane tab="业务机能" key="2">
            <p
              style={{
                fontSize: '18px',
                fontWeight: 'bold',
                marginBottom: '20px',
                color: '#2bffe6',
              }}
            >
              简介
            </p>
            <pre
              style={{
                borderBottom: '1px solid #999',
                padding: '0 0 40px 0',
                color: '#D4D5D3',
                width: '100%',
                fontSize: '12px',
              }}
            >
              {organizationData.functionsIntroduction}
            </pre>
            {organizationData.tabsData.map((item, index) => (
              <div key={index}>
                <p
                  style={{
                    margin: '10px 0',
                    color: '#2bffe6',
                    fontSize: '14px',
                  }}
                >
                  {item.label}
                </p>
                <pre
                  style={{
                    color: '#D4D5D3',
                    width: '100%',
                    fontSize: '12px',
                    whiteSpace: 'pre-wrap',
                    wordWrap: 'break-word',
                  }}
                >
                  {item.content}
                </pre>
              </div>
            ))}
          </Tabs.TabPane>
        </Tabs>
      </div>
    </div>
  );
}
