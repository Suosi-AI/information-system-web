import React, { useState } from 'react';
import { Layout, Form, Input, Button, message } from 'antd';
import { LockOutlined } from '@ant-design/icons';
import { useNavigate } from 'react-router-dom';
import img from '@/assets/images/login_logo.png';
import styles from './password.less';
import { updatePassword } from './../../services/store';
const username = localStorage.getItem('username');
const { Header, Content } = Layout;

const Password = () => {
  const navigate = useNavigate();

  const onFinish = async values => {
    try {
      // const methodId = 'your_method_id'; // 替换为实际的 methodId
      const data = {
        username: username,
        password: values.confirmpassword,
      };
      const response = await updatePassword(data);
      if (response.code === 200) {
        message.success(response.msg);
        navigate('/login');
      } else {
        message.error(response.msg || '修改密码失败');
      }
    } catch (error) {
      console.error('Update password error:', error);
      message.error(error.message || '修改密码请求失败');
    }
  };

  const onFinishFailed = errorInfo => {
    console.log('Failed:', errorInfo);
  };

  const onKeyDown = e => {
    if (e.key === ' ') {
      e.preventDefault();
    }
  };

  return (
    <div className={styles.appHeader}>
      <div className={styles.loginContent2}>
        <img className={styles.loginImg} src={img} alt="Logo" />
        <Form
          name="password_reset"
          className={styles.loginForm}
          onFinish={onFinish}
          onFinishFailed={onFinishFailed}
          autoComplete="off"
          labelCol={{
            span: 6,
          }}
          wrapperCol={{
            span: 18,
          }}
        >
          <Form.Item
            name="username"
            label="账号"
            className={styles.loginFormItem}
            rules={[
              {
                required: true,
                message: '请输入正确用户名!',
              },
            ]}
          >
            <Input
              className={styles.loginFormInput}
              placeholder="请输入用户名"
              autoComplete="off"
              onKeyDown={onKeyDown}
            />
          </Form.Item>

          {/* <Form.Item
            name="oldpassword"
            label="旧密码"
            className={styles.loginFormItem}
            rules={[
              {
                required: true,
                message: '请输入旧密码!',
              },
              {
                min: 6,
                message: '密码不能少于6位!',
              },
            ]}
          >
            <Input.Password
              className={styles.loginFormInput}
              placeholder="请输入旧密码"
              autoComplete="off"
            />
          </Form.Item> */}

          <Form.Item
            name="newpassword"
            label="新密码"
            className={styles.loginFormItem}
            rules={[
              {
                required: true,
                message: '请输入新密码!',
              },
              // {
              //   min: 6,
              //   message: '密码不能少于6位!',
              // },
              // () => ({
              //   validator(_, value) {
              //     if (value && value !== Form.getFieldValue('oldpassword')) {
              //       return Promise.resolve();
              //     }
              //     return Promise.reject(new Error('新密码不能与旧密码相同!'));
              //   },
              // }),
            ]}
          >
            <Input.Password
              className={styles.loginFormInput}
              placeholder="请输入新密码"
              autoComplete="off"
              onKeyDown={onKeyDown}
            />
          </Form.Item>

          <Form.Item
            name="confirmpassword"
            label="确认新密码"
            className={styles.loginFormItem}
            rules={[
              {
                required: true,
                message: '请确认新密码!',
              },
              ({ getFieldValue }) => ({
                validator(_, value) {
                  if (!value || getFieldValue('newpassword') === value) {
                    return Promise.resolve();
                  }
                  return Promise.reject(new Error('两次输入的新密码不一致!'));
                },
              }),
            ]}
          >
            <Input.Password
              className={styles.loginFormInput}
              placeholder="请确认新密码"
              autoComplete="off"
              onKeyDown={onKeyDown}
            />
          </Form.Item>

          <Button
            type="primary"
            htmlType="submit"
            style={{ background: '#02f3dd' }}
            className={styles.loginFormButton}
          >
            确认修改密码
          </Button>
        </Form>
      </div>
    </div>
  );
};

export default Password;
