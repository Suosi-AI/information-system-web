import React, { useState, useEffect, useCallback } from 'react';
import 'moment/locale/zh-cn';
import locale from 'antd/es/date-picker/locale/zh_CN';
import Icon from '@/components/Icon';
import moment from 'moment';
import axios from 'axios';
import {
  PlusOutlined,
  YuqueOutlined,
  FolderOpenOutlined,
  FolderOutlined,
  DeleteOutlined,
  EditOutlined,
} from '@ant-design/icons';

import styles from './index.less';
import {
  Spin,
  DatePicker,
  Checkbox,
  Pagination,
  Button,
  Input,
  Tabs,
  Menu,
  Modal,
  Dropdown,
  Popconfirm,
  message,
  Form,
  Divider,
  Empty,
} from 'antd';
import DashboardCard from './../../components/common/DashboardCard';
import ActionStats from '@/components/common/ActionStats';
import CardModal from './../../components/common/CardModal';
import SocialEditor from '@/components/common/SocialEditor';

import weibo from './../../assets/images/icon/weibo.png';
import weixin from './../../assets/images/icon/weixin.png';
import google from './../../assets/images/icon/google.png';
import blog from './../../assets/images/icon/blog.png';
import wangzhan from './../../assets/images/icon/new.png';
import baidu from './../../assets/images/icon/baidu.png';
import twitter from './../../assets/images/icon/twitter.png';
const { RangePicker } = DatePicker;
const { Search, TextArea } = Input;
const plainOptions = ['微博', '公众号', '谷歌', '博客', '网站', '推特', '百度'];
const defaultCheckedList = [''];

const CheckboxGroup = Checkbox.Group;
import {
  getMonitorTargetNewsPage,
  getInfo,
  getList,
  getSave,
  getUpdate,
  getDelete,
  exportNewsToExcel,
  downNewsWord,
  exportNewsToWordZip,
} from './../../services/store';
import img from '@/assets/images/logo.png';
import { error } from 'bfj/src/events';

const dynamicImg = sourceType => {
  switch (sourceType) {
    case '微博':
      return weibo;
    case '公众号':
      return weixin;
    case '谷歌':
      return google;
    case '博客':
      return blog;
    case '网站':
      return wangzhan;
    case '百度':
      return baidu;
    case '推特':
      return twitter;

    default:
      return '';
  }
};

export default function Social() {
  //定义的字段在哪，正在找
  const [row, setRow] = useState({ name: '' });
  const [currentMonitor, setCurrentMonitor] = useState({});
  const [selectedRange, setSelectedRange] = useState('1m');
  const [selectedLanguage, setSelectedLanguage] = useState('');
  const [dateRange, setDateRange] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [recordsCount, setRecordsCount] = useState(0);

  const [isExportMode, setIsExportMode] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [currentCardData, setCurrentCardData] = useState(null);

  const [firstLevelArchives, setFirstLevelArchives] = useState([]);
  const [secondLevelArchives, setSecondLevelArchives] = useState({});
  const [selectedFirstLevelArchiveId, setSelectedFirstLevelArchiveId] = useState(null);
  const [selectedSecondLevelArchiveId, setSelectedSecondLevelArchiveId] = useState(null);
  const [expanded, setExpanded] = useState({});
  const [isLoading, setIsLoading] = useState(false);

  const [editingId, setEditingId] = useState(null);
  const [isEditing, setIsEditing] = useState(false);

  const [isSocialEditorVisible, setIsSocialEditorVisible] = React.useState(false);
  const [mockData, setMockData] = useState([]);
  const [totalCount, setTotalCount] = useState(0);
  const [searchKeywords, setSearchKeywords] = useState('');
  const [modalData, setModalData] = useState({});
  const [newMonitor, setNewMonitor] = useState({ name: '', matchConditions: '' });
  // 媒体范围
  const [checkedList, setCheckedList] = useState(defaultCheckedList);
  const [indeterminate, setIndeterminate] = useState(true);
  const [checkAll, setCheckAll] = useState(false);

  const [targetMatchedCondition, setTargetMatchedCondition] = useState('');
  const [monitorName, setMonitorName] = useState('');
  const [isInitialFetch, setIsInitialFetch] = useState(true);
  const [shouldFetchData, setShouldFetchData] = useState(false);

  const calculateTimeRange = range => {
    const endDate = new Date(); // 结束时间为当前时间
    let startTime;

    switch (range) {
      case '24h':
        startTime = new Date(endDate.getTime() - 3600 * 1000 * 24 * 1); // 24小时
        break;
      case '1w':
        startTime = new Date(endDate.getTime() - 3600 * 1000 * 24 * 7); // 一周
        break;
      case '1m':
        startTime = new Date(endDate.getTime() - 3600 * 1000 * 24 * 30); // 一月
        break;
      case '1y':
        startTime = new Date(endDate.getTime() - 3600 * 1000 * 24 * 365); // 一年
        break;
      default:
        startTime = null;
    }

    const formatTime = date => {
      return date ? moment(date).format('YYYY-MM-DD HH:mm:ss') : '';
    };

    return {
      startTime: formatTime(startTime),
      endTime: formatTime(new Date()),
    };
  };

  const handleRangeChange = range => {
    console.log(range, totalCount);

    setSelectedRange(range);

    if (range !== 'custom') {
      const { startTime, endTime } = calculateTimeRange(range);
      setDateRange([
        moment(startTime, 'YYYY-MM-DD HH:mm:ss'),
        moment(endTime, 'YYYY-MM-DD HH:mm:ss'),
      ]);
    }
  };

  const handleDateChange = (dates, dateStrings) => {
    setDateRange(dates);
  };

  const handleLanguageChange = language => {
    setSelectedLanguage(language);
  };

  const handleSearch = searchQuery => {
    setCurrentPage(1);
    setSearchQuery(searchQuery);
    setSearchKeywords(searchQuery);
  };
  const highLight = (text, keyword) => {
    if (!keyword || keyword.trim() === '') {
      return text;
    }
    const regex = new RegExp(`(${keyword})`, 'gi');
    const parts = text.split(regex);
    return parts.map((part, index) => {
      if (regex.test(part)) {
        return (
          <span key={index} style={{ color: 'red' }}>
            {part}
          </span>
        );
      } else {
        return part;
      }
    });
  };

  const onChange = list => {
    // 如果列表长度等于选项总数，则全选，设置为空数组
    // 如果列表长度为0，则全不选，也设置为空数组
    if (list.length === plainOptions.length || list.length === 0) {
      setCheckedList(list);
      setIndeterminate(false);
      setCheckAll(list.length === plainOptions.length);
    } else {
      setCheckedList(list);
      setIndeterminate(list.length !== plainOptions.length && list.length !== 0);
      setCheckAll(list.length === plainOptions.length);
    }
  };
  const onCheckAllChange = e => {
    const newCheckedList = e.target.checked ? plainOptions : [];
    setCheckedList(newCheckedList);
    setIndeterminate(false);
    setCheckAll(e.target.checked);
  };

  useEffect(() => {
    fetchFirstLevelArchives();
  }, []);

  // 修改fetchListData的调用条件，仅当isInitialFetch为false时才调用
  useEffect(() => {
    if (shouldFetchData) {
      fetchListData();
      setShouldFetchData(true);
    }
  }, [
    currentPage,
    selectedFirstLevelArchiveId,
    selectedRange,
    selectedLanguage,
    dateRange,
    searchQuery,
    checkedList,
    // targetMatchedCondition, // 添加依赖项。不应该是弹窗关闭的时候主动调接口吗，关闭？
    shouldFetchData, // 添加依赖项
    isEditing,
  ]);

  // 在设置targetMatchedCondition时，更新isInitialFetch状态，看你那个错误。我就已经知道问题在哪了。你想一想为啥会发，哪个问题重复调用吗
  useEffect(() => {
    if (firstLevelArchives.length > 0 && isInitialFetch) {
      setTargetMatchedCondition(firstLevelArchives[0].targetMatchedCondition);
      setSelectedFirstLevelArchiveId(firstLevelArchives[0].id);
      setIsInitialFetch(false);
    }
  }, [firstLevelArchives]);

  useEffect(() => {
    setCurrentPage(1);
    setMockData([]);
  }, [selectedFirstLevelArchiveId]);

  // 获取一级档案数据
  const fetchFirstLevelArchives = async () => {
    try {
      const response = await getList();
      //   {
      //   page: currentPage.toString(),
      //   limit: pageSize.toString(),
      // }
      if (response.code === 200) {
        const firstLevelData = response.data.map(item => ({
          id: item.target_id,
          name: item.target_name,
          targetMatchedCondition: item.target_matched_condition,
        }));
        setFirstLevelArchives(firstLevelData);
        setShouldFetchData(true);
        if (firstLevelData.length > 0) {
          setMonitorName(firstLevelData[0].name);
          setTargetMatchedCondition(firstLevelData[0].targetMatchedCondition);
          setSelectedFirstLevelArchiveId(firstLevelData[0].id);
        }
      }
    } catch (error) {
      console.error('获取一级监测数据失败:', error);
    }
  };

  const handleMonitorItemClick = async id => {
    const selectedArchive = firstLevelArchives.find(item => item.id === id);
    if (selectedArchive) {
      const newExpanded = { ...expanded };
      for (const key in newExpanded) newExpanded[key] = false;
      newExpanded[id] = true;
      setExpanded(newExpanded);
      setSelectedFirstLevelArchiveId(id);
      setSelectedSecondLevelArchiveId(null);
      setCurrentPage(1);
      setTargetMatchedCondition(selectedArchive.targetMatchedCondition); // 设置匹配条件
      setMonitorName(selectedArchive.name);
      setShouldFetchData(true);
    }
  };

  const handleAddMonitor = () => {
    setIsEditing(false); // 设置为新增状态
    setNewMonitor({ name: '', matchConditions: '' }); // 清空输入框状态
    setMonitorName(''); // 清空监测目标名称
    setTargetMatchedCondition(''); // 清空匹配条件
    setIsSocialEditorVisible(true); // 显示编辑器
  };

  // 新闻列表
  const fetchListData = async () => {
    setIsLoading(true);
    try {
      let startTime, endTime;

      if (selectedRange === 'custom' && dateRange.length) {
        startTime = dateRange[0].format('YYYY-MM-DD HH:mm:ss');
        endTime = dateRange[1].format('YYYY-MM-DD HH:mm:ss');
      } else {
        const { startTime: calculatedStartTime, endTime: calculatedEndTime } =
          calculateTimeRange(selectedRange);
        startTime = calculatedStartTime;
        endTime = calculatedEndTime;
      }

      const response = await getMonitorTargetNewsPage({
        page: currentPage.toString(),
        limit: pageSize.toString(),
        startTime,
        endTime,
        lang: selectedLanguage || '',
        searchContent: searchQuery || '',
        targetMatchedCondition: targetMatchedCondition,
        sourceType: checkedList.length === plainOptions.length ? '' : checkedList.join(','),
      });
      setMockData(response.page.list);
      setTotalCount(response.page.totalCount);
    } catch (error) {
      console.error('获取数据失败:', error);
    } finally {
      setIsLoading(false);
    }
  };
  const handleModalVisibility = isVisible => {
    setIsModalVisible(isVisible);
  };

  const handleEditClick = (id, event) => {
    const selectedArchive = firstLevelArchives.find(archive => archive.id === id);
    if (selectedArchive) {
      setCurrentMonitor(selectedArchive);
      setIsEditing(true);
      setEditingId(id);
      setIsSocialEditorVisible(true);
      setMonitorName(selectedArchive.name); // 设置编辑器中的名称为选中的监测目标名称
      setTargetMatchedCondition(selectedArchive.targetMatchedCondition); // 设置编辑器中的匹配条件为选中的监测目标匹配条件
    }
  };
  const handleSaveMonitor = async () => {
    try {
      let response;
      const saveData = {
        targetName: monitorName,
        targetMatchedCondition: targetMatchedCondition,
      };

      if (isEditing) {
        // 在编辑状态下，确保更新currentMonitor对象的name和targetMatchedCondition
        const updatedMonitor = {
          // ...currentMonitor,
          targetName: monitorName, // 使用最新的monitorName
          targetMatchedCondition: targetMatchedCondition, // 使用最新的targetMatchedCondition
        };
        updatedMonitor.targetId = editingId;

        if (!monitorName) {
          alert('请输入监测目标名称');
          return;
        } else if (!targetMatchedCondition) {
          alert('请输入匹配条件');
          return;
        }
        response = await getUpdate(updatedMonitor);
      } else {
        if (!monitorName) {
          alert('请输入监测目标名称');
          return;
        } else if (!targetMatchedCondition) {
          alert('请输入匹配条件');
          return;
        }
        // 新增监测目标
        response = await getSave(saveData);
      }

      if (response.code === 200) {
        message.success(isEditing ? '编辑监测目标成功' : '添加监测目标成功');
        setIsSocialEditorVisible(false);
        setShouldFetchData(true); // 设置标志，表示需要重新获取数据
        await fetchFirstLevelArchives(); // 重新获取监测目标列表
      } else {
        message.error(`操作失败：${response.msg}`);
      }
    } catch (error) {
      console.error('操作失败:', error);
    }
  };

  const confirmDelete = async (id, event) => {
    event.stopPropagation(); // 阻止事件冒泡
    try {
      const response = await getDelete({ targetId: id });

      if (response.code === 200) {
        await fetchFirstLevelArchives();
        message.success('删除成功');
      } else {
        message.error(`操作失败：${response.msg}`);
      }
    } catch (error) {
      console.error('删除失败:', error);
    }
  };

  const handleCancel = () => {
    console.log('取消操作');
    setIsSocialEditorVisible(false);
  };

  const handleContentClick = async (id, showActions) => {
    console.log(showActions, 'showActions');

    try {
      const response = await getInfo({ newsId: id });

      if (response.code === 200 && response.data) {
        setModalData(modalData => ({
          ...modalData,
          ...response.data,
          showActions: showActions,
          searchQuery: searchQuery,
        }));
      } else {
        message.error(`操作失败：${response.msg}`);
      }
    } catch (error) {
      console.error('获取失败:', error);
      message.error('获取时发生错误');
    }
    handleModalVisibility(true);
  };

  const handleExport = id => {
    const newsId = id;

    downNewsWord({ newsId })
      .then(resp => {
        // 创建 Blob 对象
        const blob = new Blob([resp], { type: 'application/vnd.ms-word;charset=utf-8' });

        // 生成 URL
        const url = window.URL.createObjectURL(blob);

        // 创建一个 <a> 元素并设置相关属性
        const link = document.createElement('a');
        link.style.display = 'none';
        link.href = url;
        link.download = '新闻.doc'; // 设置下载文件的名称

        // 将 <a> 元素添加到页面中并触发点击
        document.body.appendChild(link);
        link.click();

        // 清理操作
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);

        message.success('导出成功!');
      })
      .catch(error => {
        console.error('导出失败:', error);
        message.error('导出失败: ' + error.message);
      });
  };

  // 收集当前页新闻ID的方法
  const collectCurrentPageNewsIds = () => {
    const currentIds = mockData.map(item => item.id); // 假设mockData是当前页新闻数据的数组
    return currentIds;
  };

  // 导出为Excel的方法
  const handleExportToExcel = () => {
    const newsId = collectCurrentPageNewsIds();
    let newsIdL = {
      newsIdList: newsId,
    };

    exportNewsToExcel(newsIdL)
      .then(resp => {
        // 创建 Blob 对象
        const blob = new Blob([resp], { type: 'application/vnd.ms-xls;charset=utf-8' });

        // 生成 URL
        const url = window.URL.createObjectURL(blob);

        // 创建一个 <a> 元素并设置相关属性
        const link = document.createElement('a');
        link.style.display = 'none';
        link.href = url;
        link.download = '新闻列表.xls'; // 设置下载文件的名称

        // 将 <a> 元素添加到页面中并触发点击
        document.body.appendChild(link);
        link.click();

        // 清理操作
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);

        message.success('导出成功!');
      })
      .catch(error => {
        console.error('导出为Excel失败:', error);
        message.error('导出为Excel失败');
      });
  };

  // 导出多个Word压缩成Zip的方法
  const handleExportToWordZip = () => {
    const newsId = collectCurrentPageNewsIds();
    let newsIdL = {
      newsIdList: newsId,
    };

    exportNewsToWordZip(newsIdL)
      .then(resp => {
        // 创建 Blob 对象
        const blob = new Blob([resp], { type: 'application/vnd.ms-zip;charset=utf-8' });

        // 生成 URL
        const url = window.URL.createObjectURL(blob);

        // 创建一个 <a> 元素并设置相关属性
        const link = document.createElement('a');
        link.style.display = 'none';
        link.href = url;
        link.download = '新闻列表.zip'; // 设置下载文件的名称

        // 将 <a> 元素添加到页面中并触发点击
        document.body.appendChild(link);
        link.click();

        // 清理操作
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);

        message.success('导出成功!');
      })
      .catch(error => {
        console.error('导出为Excel失败:', error);
        message.error('导出为Excel失败');
      });
  };

  const menu = (
    <Menu>
      <Menu.Item key="excel" onClick={handleExportToExcel}>
        导出为Excel
      </Menu.Item>
      <Menu.Item key="wordZip" onClick={handleExportToWordZip}>
        导出为WordZip
      </Menu.Item>
    </Menu>
  );

  const handleCollect = (cardId, isCollected) => {
    console.log('Card ID:', cardId, 'is now', isCollected ? 'collected' : 'not collected');
    // 实现收藏逻辑
  };
  return (
    <>
      <div className={styles.container}>
        <div className={styles.left}>
          <Button onClick={handleAddMonitor} icon={<PlusOutlined />} className={styles.btn}>
            添加监测目标
          </Button>
          <div>
            {firstLevelArchives.map(item => (
              <div key={item.id}>
                <div className={styles.listItem}>
                  {expanded[item.id] ? <FolderOpenOutlined /> : <FolderOutlined />}
                  <span className={styles.title} onClick={() => handleMonitorItemClick(item.id)}>
                    {item.name}
                  </span>
                  <React.Fragment>
                    <EditOutlined
                      className={styles.editIcon}
                      name="EditOutlined"
                      onClick={event => handleEditClick(item.id, event)}
                    />
                    <Popconfirm
                      title="您确定要删除吗？"
                      onConfirm={event => confirmDelete(item.id, event)}
                      onCancel={() => console.log('Cancel clicked')}
                      okText="是"
                      cancelText="否"
                    >
                      <DeleteOutlined className={styles.deleteIcon} name="DeleteOutlined" />
                    </Popconfirm>
                  </React.Fragment>
                </div>
              </div>
            ))}
          </div>
        </div>

        <Modal
          title={isEditing ? '编辑监测目标' : '添加监测目标'}
          visible={isSocialEditorVisible}
          onOk={handleSaveMonitor}
          onCancel={handleCancel}
          className={styles.modalSty}
        >
          <Form>
            <Form.Item label="监测目标名称">
              <Input
                value={monitorName}
                onChange={e => setMonitorName(e.target.value)}
                placeholder="监测目标名称"
              />
            </Form.Item>
            <Form.Item label="匹配条件">
              <TextArea
                rows={4}
                value={targetMatchedCondition}
                onChange={e => setTargetMatchedCondition(e.target.value)}
                placeholder="输入匹配条件，使用+-|组合对应逻辑表达式，例：(日本|海上保安厅)+军舰 进行筛选"
              />
            </Form.Item>
          </Form>
        </Modal>
        <div className={styles.container1}>
          <div className={styles.countTop}>
            <div className={styles.searchTop}>
              <Search
                placeholder="请输入您要搜索的内容"
                allowClear
                onSearch={e => handleSearch(e)}
                style={{
                  width: 200,
                }}
              />
            </div>
            <div className={styles.timeSelect}>
              <span className={styles.curP}>时间范围：</span>
              <span
                className={`${styles.curP} ${selectedRange === '24h' ? styles.selected : ''}`}
                onClick={() => handleRangeChange('24h')}
              >
                近一天
              </span>
              <span
                className={`${styles.curP} ${selectedRange === '1w' ? styles.selected : ''}`}
                onClick={() => handleRangeChange('1w')}
              >
                近一周
              </span>
              <span
                className={`${styles.curP} ${selectedRange === '1m' ? styles.selected : ''}`}
                onClick={() => handleRangeChange('1m')}
              >
                近一月
              </span>
              <span
                className={`${styles.curP} ${selectedRange === '1y' ? styles.selected : ''}`}
                onClick={() => handleRangeChange('1y')}
              >
                近一年
              </span>
              <span
                className={`${styles.curP} ${selectedRange === 'custom' ? styles.selected : ''}`}
                onClick={() => handleRangeChange('custom')}
              >
                自定义
              </span>
              {selectedRange === 'custom' && (
                <RangePicker
                  locale={locale}
                  range-separator="至"
                  start-placeholder="开始日期"
                  end-placeholder="结束日期"
                  value-format="yyyy-MM-dd HH:mm:ss"
                  default-time={['00:00:00', '23:59:59']}
                  className="mar-l-10"
                  onChange={handleDateChange}
                />
              )}
            </div>
            <div className={styles.mediaSelect}>
              <span>媒体范围：</span>
              <Checkbox
                indeterminate={indeterminate}
                onChange={onCheckAllChange}
                checked={checkAll}
              >
                全选
              </Checkbox>
              <Divider />
              <CheckboxGroup options={plainOptions} value={checkedList} onChange={onChange} />
            </div>
            <div className={styles.languageSelect}>
              <span className={styles.curP}>语种筛选：</span>
              <span
                className={`${styles.curP1} ${selectedLanguage === '' ? styles.selected : ''}`}
                onClick={() => handleLanguageChange('')}
              >
                全部
              </span>
              <span
                className={`${styles.curP1} ${selectedLanguage === '中文' ? styles.selected : ''}`}
                onClick={() => handleLanguageChange('中文')}
              >
                中文
              </span>
              <span
                className={`${styles.curP1} ${selectedLanguage === '日语' ? styles.selected : ''}`}
                onClick={() => handleLanguageChange('日语')}
              >
                日语
              </span>
              <span
                className={`${styles.curP1} ${selectedLanguage === '英语' ? styles.selected : ''}`}
                onClick={() => handleLanguageChange('英语')}
              >
                英语
              </span>
              <span
                className={`${styles.curP1} ${selectedLanguage === '其他' ? styles.selected : ''}`}
                onClick={() => handleLanguageChange('其他')}
              >
                其他
              </span>
            </div>
            <div
              style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                padding: '0 20px 0 0 ',
              }}
            >
              <span>
                共<span style={{ color: '#FF8000', margin: '0 10px' }}>{totalCount}</span>
                条记录
              </span>

              {totalCount > 0 ? (
                <Dropdown overlay={menu} placement="bottomCenter">
                  <Button style={{ backgroundColor: 'rgba(255, 128, 0, 0.5)', color: 'white' }}>
                    批量导出
                  </Button>
                </Dropdown>
              ) : (
                <div>
                  <Button
                    style={{ backgroundColor: 'rgba(255, 128, 0, 0.5)', color: 'white' }}
                    disabled
                  >
                    批量导出
                  </Button>
                </div>
              )}
            </div>
          </div>
          {mockData.length === 0 && !isLoading ? (
            <Empty className={styles.empty} description={<div>暂无数据</div>} />
          ) : (
            <Spin style={{ marginTop: '30vh' }} tip="加载数据中..." spinning={isLoading}>
              {mockData.map((card, index) => {
                const processedCard = {
                  ...card,
                  titleZh: highLight(card.titleZh, searchQuery),
                  contentZh: highLight(card.contentZh, searchQuery),
                };

                return (
                  <div key={card.id} style={{ display: 'flex', paddingLeft: '10px' }}>
                    <DashboardCard
                      className={styles.dashboardCardStyle}
                      key={card.id}
                      img={dynamicImg(card.sourceType)}
                      sourceName={card.sourceName}
                      publishTime={card.publishTime}
                      title={processedCard.titleZh}
                      content={processedCard.contentZh}
                      link={card.url}
                      images={card.pics}
                      likeNum={card.likeNum}
                      commentNum={card.commentNum}
                      shareNum={card.shareNum}
                      readNum={card.readNum}
                      showActions={card.showActions}
                      onClickContent={() => handleContentClick(card.id, card.showActions)}
                      onCollect={isCollected => handleCollect(card.id, isCollected)}
                      onExport={() => handleExport(card.id)}
                      whetherCollect={card.whetherCollect}
                      newsId={card.id}
                      folderId={card.folderId}
                      onHandleJc={fetchListData}
                    />
                  </div>
                );
              })}
            </Spin>
          )}
          {mockData.length > 0 && (
            <Pagination
              current={currentPage}
              total={totalCount}
              pageSize={pageSize}
              onChange={(page, pageSize) => {
                setCurrentPage(page);
                setPageSize(pageSize);
              }}
              onShowSizeChange={(current, size) => {
                setCurrentPage(1); // 重置到第一页
                setPageSize(size);
              }}
              style={{ margin: '10px auto', display: 'flex', justifyContent: 'center' }}
              showSizeChanger={false}
            />
          )}
        </div>
      </div>

      <CardModal
        visible={isModalVisible}
        onCancel={() => handleModalVisibility(false)}
        modalData={modalData}
        setIsModalVisible={handleModalVisibility}
        handleExport={() => handleExport(modalData.id)}
        images={modalData.pics}
        onHandleJc={fetchListData}
      />
    </>
  );
}
